#ifndef TARGET_OS_SIMULATOR
#include <TargetConditionals.h>
#endif
#if TARGET_OS_SIMULATOR
#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
#ifndef HMSSDK_SWIFT_H
#define HMSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#import <HMSSDK/HMSSDK.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="HMSSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
@class NSNumber;

/// To join a room created, clients need to create a HMSConfig instance and use that instance to call <code>join</code> method of HMSSDK
SWIFT_CLASS("_TtC6HMSSDK9HMSConfig")
@interface HMSConfig : NSObject
/// the name that the user wants to be displayed while in the room
@property (nonatomic, readonly, copy) NSString * _Nonnull userName;
@property (nonatomic, readonly, copy) NSString * _Nonnull userID;
@property (nonatomic, readonly, copy) NSString * _Nonnull roomID;
/// the auth token to be used
@property (nonatomic, readonly, copy) NSString * _Nonnull authToken;
@property (nonatomic, readonly) BOOL shouldSkipPIIEvents;
/// any json string or metadata that can be passed while joining
@property (nonatomic, readonly, copy) NSString * _Nullable metaData;
/// to override the default endpoint (advanced)
@property (nonatomic, readonly, copy) NSString * _Nullable endpoint;
- (nonnull instancetype)initWithUserName:(NSString * _Nonnull)userName userID:(NSString * _Nonnull)userID roomID:(NSString * _Nonnull)roomID authToken:(NSString * _Nonnull)authToken shouldSkipPIIEvents:(BOOL)shouldSkipPIIEvents metaData:(NSString * _Nullable)metaData endpoint:(NSString * _Nullable)endpoint OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK9HMSDevice")
@interface HMSDevice : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum HMSErrorCode : NSInteger;

SWIFT_CLASS("_TtC6HMSSDK8HMSError")
@interface HMSError : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum HMSErrorCode code;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, copy) NSString * _Nullable info;
@property (nonatomic, readonly, copy) NSString * _Nullable action;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable params;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id code:(enum HMSErrorCode)code message:(NSString * _Nonnull)message info:(NSString * _Nullable)info action:(NSString * _Nullable)action params:(NSDictionary<NSString *, id> * _Nullable)params OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedDescription;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull analyticsRepresentation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HMSErrorCode, open) {
  HMSErrorCodeWebsocketGenericError = 1000,
  HMSErrorCodeWebsocketConnectionLost = 1003,
  HMSErrorCodeInitServerError = 2000,
  HMSErrorCodeInitHTTPConnectionLost = 2001,
  HMSErrorCodeInitHTTPErrorBadRequest = 2400,
  HMSErrorCodeInitHTTPErrorInvalidEndpointURL = 2002,
  HMSErrorCodeInitHTTPErrorEndpointUnreachable = 2003,
  HMSErrorCodeTracksErrorGeneric = 3000,
  HMSErrorCodeTracksErrorCantAccessCaptureDevice = 3001,
  HMSErrorCodeTracksErrorDeviceNotAvailable = 3002,
  HMSErrorCodeTracksErrorDeviceInUse = 3003,
  HMSErrorCodeTracksErrorPeerConnectionFactoryDisposed = 3004,
  HMSErrorCodeTracksErrorNothingToReturn = 3005,
  HMSErrorCodeTracksErrorInvalidVideoSettings = 3006,
  HMSErrorCodeTracksErrorCodecChangeNotPermitted = 3007,
  HMSErrorCodeWebrtcErrorCreateOfferFailed = 4001,
  HMSErrorCodeWebrtcErrorCreateAnswerFailed = 4002,
  HMSErrorCodeWebrtcErrorSetLocalDescriptionFailed = 4003,
  HMSErrorCodeWebrtcErrorSetRemoteDescriptionFailed = 4004,
  HMSErrorCodeWebrtcErrorICEFailure = 4005,
  HMSErrorCodeJoinErrorServer = 5000,
  HMSErrorCodeJoinErrorAlreadyJoined = 5001,
  HMSErrorCodeGenericErrorNotConnected = 6000,
  HMSErrorCodeGenericErrorSignalling = 6001,
  HMSErrorCodeGenericErrorUnknown = 6002,
  HMSErrorCodeGenericErrorNotReady = 6003,
  HMSErrorCodeGenericErrorJsonParsingFailed = 6004,
  HMSErrorCodeGenericErrorTrackMetadataMissing = 6005,
  HMSErrorCodeGenericErrorRTCTrackMissing = 6006,
  HMSErrorCodeGenericErrorPeerMetadataMissing = 6007,
};

@class HMSAudioTrack;
@class HMSVideoTrack;
@class HMSTrack;

/// A peer represents all participants connected to a room. Peers can be “local” or “remote”
SWIFT_CLASS("_TtC6HMSSDK7HMSPeer")
@interface HMSPeer : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull peerID;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) BOOL isLocal;
@property (nonatomic, copy) NSString * _Nullable role;
@property (nonatomic, readonly, copy) NSString * _Nullable customerUserID;
@property (nonatomic, copy) NSString * _Nullable customerDescription;
@property (nonatomic, strong) HMSAudioTrack * _Nullable audioTrack;
@property (nonatomic, strong) HMSVideoTrack * _Nullable videoTrack;
@property (nonatomic, copy) NSArray<HMSTrack *> * _Nullable auxiliaryTracks;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class HMSLocalAudioTrack;
@class HMSLocalVideoTrack;

SWIFT_CLASS("_TtC6HMSSDK12HMSLocalPeer")
@interface HMSLocalPeer : HMSPeer
- (HMSLocalAudioTrack * _Nullable)localAudioTrack SWIFT_WARN_UNUSED_RESULT;
- (HMSLocalVideoTrack * _Nullable)localVideoTrack SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, HMSLogLevel, open) {
  HMSLogLevelOff = 0,
  HMSLogLevelError = 1,
  HMSLogLevelWarning = 2,
  HMSLogLevelVerbose = 3,
};


SWIFT_PROTOCOL("_TtP6HMSSDK13HMSLumberjack_")
@protocol HMSLumberjack
- (void)logMessage:(NSString * _Nonnull)message level:(enum HMSLogLevel)level;
@end


/// A local peer can send any message/data to all remote peers in the room
SWIFT_CLASS("_TtC6HMSSDK10HMSMessage")
@interface HMSMessage : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull sender;
/// peerID, optional, default is nil in which case broadcast will be sent to all
@property (nonatomic, readonly, copy) NSString * _Nullable receiver;
@property (nonatomic, readonly, copy) NSString * _Nonnull time;
/// default is Chat Type
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// string
@property (nonatomic, readonly, copy) NSString * _Nullable message;
- (nonnull instancetype)initWithSender:(NSString * _Nonnull)sender receiver:(NSString * _Nullable)receiver time:(NSString * _Nonnull)time type:(NSString * _Nonnull)type message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK17HMSNetworkQuality")
@interface HMSNetworkQuality : NSObject
@property (nonatomic, readonly, strong) HMSPeer * _Nonnull peer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



typedef SWIFT_ENUM(NSInteger, HMSPeerUpdate, open) {
  HMSPeerUpdatePeerJoined = 0,
  HMSPeerUpdatePeerLeft = 1,
  HMSPeerUpdatePeerKnocked = 2,
  HMSPeerUpdateAudioToggled = 3,
  HMSPeerUpdateVideoToggled = 4,
  HMSPeerUpdateRoleUpdated = 5,
  HMSPeerUpdateDefaultUpdate = 6,
};

@class HMSRemoteAudioTrack;
@class HMSRemoteVideoTrack;

SWIFT_CLASS("_TtC6HMSSDK13HMSRemotePeer")
@interface HMSRemotePeer : HMSPeer
- (HMSRemoteAudioTrack * _Nullable)remoteAudioTrack SWIFT_WARN_UNUSED_RESULT;
- (HMSRemoteVideoTrack * _Nullable)remoteVideoTrack SWIFT_WARN_UNUSED_RESULT;
@end


/// A room represents a real-time audio, video session, the basic building block of the 100ms SDK
SWIFT_CLASS("_TtC6HMSSDK7HMSRoom")
@interface HMSRoom : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nullable metaData;
@property (nonatomic, copy) NSArray<HMSPeer *> * _Nonnull peers;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HMSRoomUpdate, open) {
  HMSRoomUpdateRoomTypeChanged = 0,
  HMSRoomUpdateMetaDataUpdated = 1,
};

@protocol HMSUpdateListener;
@class HMSTrackSettings;

/// The public interface of 100ms SDK. Create an instance of HMSSDK to start using the SDK.
/// <em>Key Concepts</em>
/// <em>Room</em> - A room represents a real-time audio, video session, the basic building block of the 100mslive Video SDK
/// <em>Track</em> - A track represents either the audio or video that makes up a stream
/// <em>Peer</em> - A peer represents all participants connected to a room. Peers can be “local” or “remote”
/// <em>Broadcast</em> - A local peer can send any message/data to all remote peers in the room
/// HMSSDK has other methods which the client app can use to get more info about the Room, Peer and Tracks
SWIFT_CLASS("_TtC6HMSSDK6HMSSDK")
@interface HMSSDK : NSObject
/// To join a room created, clients need to create a HMSConfig instance and use that instance to call <code>join</code> method of HMSSDK
/// Use the HMSConfig and HMSUpdateListener instances to call <code>join</code> method on the instance of HMSSDK.
/// Once Join succeeds, all the callbacks keep coming on every change in the room and the app can react accordingly
/// \param config the config object instance which contains joining information
///
/// \param delegate the update listener object which will receive all callbacks
///
- (void)joinWithConfig:(HMSConfig * _Nonnull)config delegate:(id <HMSUpdateListener> _Nonnull)delegate;
/// Call the <code>leave</code> method on the HMSSDK instance to leave a room
- (void)leave;
/// Returns the local peer, which contains the local tracks
@property (nonatomic, readonly, strong) HMSLocalPeer * _Nullable localPeer;
/// Returns all remote peers in the room
@property (nonatomic, readonly, copy) NSArray<HMSRemotePeer *> * _Nullable remotePeers;
/// Returns the room which was joined
@property (nonatomic, readonly, strong) HMSRoom * _Nullable room;
- (void)sendWithMessage:(HMSMessage * _Nonnull)message;
- (void)addWithDelegate:(id <HMSUpdateListener> _Nonnull)delegate;
- (void)removeWithDelegate:(id <HMSUpdateListener> _Nonnull)delegate;
/// this will instantiate an HMSSDK object
/// \param block pass a block with different settings as required
///
///
/// returns:
/// an instance of HMSSDK object
+ (HMSSDK * _Nonnull)buildWithBlock:(void (^ _Nullable)(HMSSDK * _Nonnull))block SWIFT_WARN_UNUSED_RESULT;
/// to set a track settings different from default
@property (nonatomic, strong) HMSTrackSettings * _Nonnull trackSettings;
/// set the analytical level
@property (nonatomic) HMSAnalyticsEventLevel analyticsLevel;
/// set the logging level
@property (nonatomic) enum HMSLogLevel logLevel;
@property (nonatomic, strong) id <HMSLumberjack> _Nullable logger;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK10HMSSpeaker")
@interface HMSSpeaker : NSObject
@end


typedef SWIFT_ENUM(NSInteger, HMSTrackUpdate, open) {
  HMSTrackUpdateTrackAdded = 0,
  HMSTrackUpdateTrackRemoved = 1,
  HMSTrackUpdateTrackMuted = 2,
  HMSTrackUpdateTrackUnmuted = 3,
  HMSTrackUpdateTrackDescriptionChanged = 4,
};


/// 100ms SDK provides callbacks to the client app about any change or update happening in the room after a user has joined by implementing HMSUpdateListener.
/// These updates can be used to render the video on screen or to display other info regarding the room.
SWIFT_PROTOCOL("_TtP6HMSSDK17HMSUpdateListener_")
@protocol HMSUpdateListener
/// This will be called on a successful JOIN of the room by the user
/// This is the point where applications can stop showing its loading state
/// \param room the room which was joined
///
- (void)onJoin:(HMSRoom * _Nonnull)room;
/// This is called when there is a change in any property of the Room
/// \param room the room which was joined
///
/// \param update the triggered update type. Should be used to perform different UI Actions
///
- (void)onRoom:(HMSRoom * _Nonnull)room update:(enum HMSRoomUpdate)update;
/// This will be called whenever there is an update on an existing peer
/// or a new peer got added/existing peer is removed.
/// This callback can be used to keep a track of all the peers in the room
/// \param peer the peer who joined/left or was updated
///
/// \param update the triggered update type. Should be used to perform different UI Actions
///
- (void)onPeer:(HMSPeer * _Nonnull)peer update:(enum HMSPeerUpdate)update;
/// This is called when there are updates on an existing track
/// or a new track got added/existing track is removed
/// This callback can be used to render the video on screen whenever a track gets added
/// \param track the track which was added, removed or updated
///
/// \param update the triggered update type
///
/// \param peer the peer for which track was added, removed or updated
///
- (void)onTrack:(HMSTrack * _Nonnull)track update:(enum HMSTrackUpdate)update peer:(HMSPeer * _Nonnull)peer;
/// This will be called when there is an error in the system
/// and SDK has already retried to fix the error
/// \param error the error that occured
///
- (void)onError:(HMSError * _Nonnull)error;
/// This is called when there is a new broadcast message from any other peer in the room
/// This can be used to implement chat is the room
/// \param message the received broadcast message
///
- (void)onMessage:(HMSMessage * _Nonnull)message;
- (void)onUpdatedSpeakers:(NSArray<HMSSpeaker *> * _Nonnull)speakers;
- (void)onReconnecting;
- (void)onReconnected;
@end


SWIFT_CLASS("_TtC6HMSSDK12HMSUtilities")
@interface HMSUtilities : NSObject
+ (NSArray<HMSDevice *> * _Nonnull)getDevices SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<HMSVideoTrack *> * _Nonnull)getAllVideoTracksFor:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<HMSAudioTrack *> * _Nonnull)getAllAudioTracksFor:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
+ (HMSPeer * _Nullable)getPeerFor:(NSString * _Nonnull)id in:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
#ifndef HMSSDK_SWIFT_H
#define HMSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#import <HMSSDK/HMSSDK.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="HMSSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
@class NSNumber;

/// To join a room created, clients need to create a HMSConfig instance and use that instance to call <code>join</code> method of HMSSDK
SWIFT_CLASS("_TtC6HMSSDK9HMSConfig")
@interface HMSConfig : NSObject
/// the name that the user wants to be displayed while in the room
@property (nonatomic, readonly, copy) NSString * _Nonnull userName;
@property (nonatomic, readonly, copy) NSString * _Nonnull userID;
@property (nonatomic, readonly, copy) NSString * _Nonnull roomID;
/// the auth token to be used
@property (nonatomic, readonly, copy) NSString * _Nonnull authToken;
@property (nonatomic, readonly) BOOL shouldSkipPIIEvents;
/// any json string or metadata that can be passed while joining
@property (nonatomic, readonly, copy) NSString * _Nullable metaData;
/// to override the default endpoint (advanced)
@property (nonatomic, readonly, copy) NSString * _Nullable endpoint;
- (nonnull instancetype)initWithUserName:(NSString * _Nonnull)userName userID:(NSString * _Nonnull)userID roomID:(NSString * _Nonnull)roomID authToken:(NSString * _Nonnull)authToken shouldSkipPIIEvents:(BOOL)shouldSkipPIIEvents metaData:(NSString * _Nullable)metaData endpoint:(NSString * _Nullable)endpoint OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK9HMSDevice")
@interface HMSDevice : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum HMSErrorCode : NSInteger;

SWIFT_CLASS("_TtC6HMSSDK8HMSError")
@interface HMSError : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum HMSErrorCode code;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, copy) NSString * _Nullable info;
@property (nonatomic, readonly, copy) NSString * _Nullable action;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable params;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id code:(enum HMSErrorCode)code message:(NSString * _Nonnull)message info:(NSString * _Nullable)info action:(NSString * _Nullable)action params:(NSDictionary<NSString *, id> * _Nullable)params OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedDescription;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull analyticsRepresentation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HMSErrorCode, open) {
  HMSErrorCodeWebsocketGenericError = 1000,
  HMSErrorCodeWebsocketConnectionLost = 1003,
  HMSErrorCodeInitServerError = 2000,
  HMSErrorCodeInitHTTPConnectionLost = 2001,
  HMSErrorCodeInitHTTPErrorBadRequest = 2400,
  HMSErrorCodeInitHTTPErrorInvalidEndpointURL = 2002,
  HMSErrorCodeInitHTTPErrorEndpointUnreachable = 2003,
  HMSErrorCodeTracksErrorGeneric = 3000,
  HMSErrorCodeTracksErrorCantAccessCaptureDevice = 3001,
  HMSErrorCodeTracksErrorDeviceNotAvailable = 3002,
  HMSErrorCodeTracksErrorDeviceInUse = 3003,
  HMSErrorCodeTracksErrorPeerConnectionFactoryDisposed = 3004,
  HMSErrorCodeTracksErrorNothingToReturn = 3005,
  HMSErrorCodeTracksErrorInvalidVideoSettings = 3006,
  HMSErrorCodeTracksErrorCodecChangeNotPermitted = 3007,
  HMSErrorCodeWebrtcErrorCreateOfferFailed = 4001,
  HMSErrorCodeWebrtcErrorCreateAnswerFailed = 4002,
  HMSErrorCodeWebrtcErrorSetLocalDescriptionFailed = 4003,
  HMSErrorCodeWebrtcErrorSetRemoteDescriptionFailed = 4004,
  HMSErrorCodeWebrtcErrorICEFailure = 4005,
  HMSErrorCodeJoinErrorServer = 5000,
  HMSErrorCodeJoinErrorAlreadyJoined = 5001,
  HMSErrorCodeGenericErrorNotConnected = 6000,
  HMSErrorCodeGenericErrorSignalling = 6001,
  HMSErrorCodeGenericErrorUnknown = 6002,
  HMSErrorCodeGenericErrorNotReady = 6003,
  HMSErrorCodeGenericErrorJsonParsingFailed = 6004,
  HMSErrorCodeGenericErrorTrackMetadataMissing = 6005,
  HMSErrorCodeGenericErrorRTCTrackMissing = 6006,
  HMSErrorCodeGenericErrorPeerMetadataMissing = 6007,
};

@class HMSAudioTrack;
@class HMSVideoTrack;
@class HMSTrack;

/// A peer represents all participants connected to a room. Peers can be “local” or “remote”
SWIFT_CLASS("_TtC6HMSSDK7HMSPeer")
@interface HMSPeer : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull peerID;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) BOOL isLocal;
@property (nonatomic, copy) NSString * _Nullable role;
@property (nonatomic, readonly, copy) NSString * _Nullable customerUserID;
@property (nonatomic, copy) NSString * _Nullable customerDescription;
@property (nonatomic, strong) HMSAudioTrack * _Nullable audioTrack;
@property (nonatomic, strong) HMSVideoTrack * _Nullable videoTrack;
@property (nonatomic, copy) NSArray<HMSTrack *> * _Nullable auxiliaryTracks;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class HMSLocalAudioTrack;
@class HMSLocalVideoTrack;

SWIFT_CLASS("_TtC6HMSSDK12HMSLocalPeer")
@interface HMSLocalPeer : HMSPeer
- (HMSLocalAudioTrack * _Nullable)localAudioTrack SWIFT_WARN_UNUSED_RESULT;
- (HMSLocalVideoTrack * _Nullable)localVideoTrack SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, HMSLogLevel, open) {
  HMSLogLevelOff = 0,
  HMSLogLevelError = 1,
  HMSLogLevelWarning = 2,
  HMSLogLevelVerbose = 3,
};


SWIFT_PROTOCOL("_TtP6HMSSDK13HMSLumberjack_")
@protocol HMSLumberjack
- (void)logMessage:(NSString * _Nonnull)message level:(enum HMSLogLevel)level;
@end


/// A local peer can send any message/data to all remote peers in the room
SWIFT_CLASS("_TtC6HMSSDK10HMSMessage")
@interface HMSMessage : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull sender;
/// peerID, optional, default is nil in which case broadcast will be sent to all
@property (nonatomic, readonly, copy) NSString * _Nullable receiver;
@property (nonatomic, readonly, copy) NSString * _Nonnull time;
/// default is Chat Type
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// string
@property (nonatomic, readonly, copy) NSString * _Nullable message;
- (nonnull instancetype)initWithSender:(NSString * _Nonnull)sender receiver:(NSString * _Nullable)receiver time:(NSString * _Nonnull)time type:(NSString * _Nonnull)type message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK17HMSNetworkQuality")
@interface HMSNetworkQuality : NSObject
@property (nonatomic, readonly, strong) HMSPeer * _Nonnull peer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



typedef SWIFT_ENUM(NSInteger, HMSPeerUpdate, open) {
  HMSPeerUpdatePeerJoined = 0,
  HMSPeerUpdatePeerLeft = 1,
  HMSPeerUpdatePeerKnocked = 2,
  HMSPeerUpdateAudioToggled = 3,
  HMSPeerUpdateVideoToggled = 4,
  HMSPeerUpdateRoleUpdated = 5,
  HMSPeerUpdateDefaultUpdate = 6,
};

@class HMSRemoteAudioTrack;
@class HMSRemoteVideoTrack;

SWIFT_CLASS("_TtC6HMSSDK13HMSRemotePeer")
@interface HMSRemotePeer : HMSPeer
- (HMSRemoteAudioTrack * _Nullable)remoteAudioTrack SWIFT_WARN_UNUSED_RESULT;
- (HMSRemoteVideoTrack * _Nullable)remoteVideoTrack SWIFT_WARN_UNUSED_RESULT;
@end


/// A room represents a real-time audio, video session, the basic building block of the 100ms SDK
SWIFT_CLASS("_TtC6HMSSDK7HMSRoom")
@interface HMSRoom : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nullable metaData;
@property (nonatomic, copy) NSArray<HMSPeer *> * _Nonnull peers;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HMSRoomUpdate, open) {
  HMSRoomUpdateRoomTypeChanged = 0,
  HMSRoomUpdateMetaDataUpdated = 1,
};

@protocol HMSUpdateListener;
@class HMSTrackSettings;

/// The public interface of 100ms SDK. Create an instance of HMSSDK to start using the SDK.
/// <em>Key Concepts</em>
/// <em>Room</em> - A room represents a real-time audio, video session, the basic building block of the 100mslive Video SDK
/// <em>Track</em> - A track represents either the audio or video that makes up a stream
/// <em>Peer</em> - A peer represents all participants connected to a room. Peers can be “local” or “remote”
/// <em>Broadcast</em> - A local peer can send any message/data to all remote peers in the room
/// HMSSDK has other methods which the client app can use to get more info about the Room, Peer and Tracks
SWIFT_CLASS("_TtC6HMSSDK6HMSSDK")
@interface HMSSDK : NSObject
/// To join a room created, clients need to create a HMSConfig instance and use that instance to call <code>join</code> method of HMSSDK
/// Use the HMSConfig and HMSUpdateListener instances to call <code>join</code> method on the instance of HMSSDK.
/// Once Join succeeds, all the callbacks keep coming on every change in the room and the app can react accordingly
/// \param config the config object instance which contains joining information
///
/// \param delegate the update listener object which will receive all callbacks
///
- (void)joinWithConfig:(HMSConfig * _Nonnull)config delegate:(id <HMSUpdateListener> _Nonnull)delegate;
/// Call the <code>leave</code> method on the HMSSDK instance to leave a room
- (void)leave;
/// Returns the local peer, which contains the local tracks
@property (nonatomic, readonly, strong) HMSLocalPeer * _Nullable localPeer;
/// Returns all remote peers in the room
@property (nonatomic, readonly, copy) NSArray<HMSRemotePeer *> * _Nullable remotePeers;
/// Returns the room which was joined
@property (nonatomic, readonly, strong) HMSRoom * _Nullable room;
- (void)sendWithMessage:(HMSMessage * _Nonnull)message;
- (void)addWithDelegate:(id <HMSUpdateListener> _Nonnull)delegate;
- (void)removeWithDelegate:(id <HMSUpdateListener> _Nonnull)delegate;
/// this will instantiate an HMSSDK object
/// \param block pass a block with different settings as required
///
///
/// returns:
/// an instance of HMSSDK object
+ (HMSSDK * _Nonnull)buildWithBlock:(void (^ _Nullable)(HMSSDK * _Nonnull))block SWIFT_WARN_UNUSED_RESULT;
/// to set a track settings different from default
@property (nonatomic, strong) HMSTrackSettings * _Nonnull trackSettings;
/// set the analytical level
@property (nonatomic) HMSAnalyticsEventLevel analyticsLevel;
/// set the logging level
@property (nonatomic) enum HMSLogLevel logLevel;
@property (nonatomic, strong) id <HMSLumberjack> _Nullable logger;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK10HMSSpeaker")
@interface HMSSpeaker : NSObject
@end


typedef SWIFT_ENUM(NSInteger, HMSTrackUpdate, open) {
  HMSTrackUpdateTrackAdded = 0,
  HMSTrackUpdateTrackRemoved = 1,
  HMSTrackUpdateTrackMuted = 2,
  HMSTrackUpdateTrackUnmuted = 3,
  HMSTrackUpdateTrackDescriptionChanged = 4,
};


/// 100ms SDK provides callbacks to the client app about any change or update happening in the room after a user has joined by implementing HMSUpdateListener.
/// These updates can be used to render the video on screen or to display other info regarding the room.
SWIFT_PROTOCOL("_TtP6HMSSDK17HMSUpdateListener_")
@protocol HMSUpdateListener
/// This will be called on a successful JOIN of the room by the user
/// This is the point where applications can stop showing its loading state
/// \param room the room which was joined
///
- (void)onJoin:(HMSRoom * _Nonnull)room;
/// This is called when there is a change in any property of the Room
/// \param room the room which was joined
///
/// \param update the triggered update type. Should be used to perform different UI Actions
///
- (void)onRoom:(HMSRoom * _Nonnull)room update:(enum HMSRoomUpdate)update;
/// This will be called whenever there is an update on an existing peer
/// or a new peer got added/existing peer is removed.
/// This callback can be used to keep a track of all the peers in the room
/// \param peer the peer who joined/left or was updated
///
/// \param update the triggered update type. Should be used to perform different UI Actions
///
- (void)onPeer:(HMSPeer * _Nonnull)peer update:(enum HMSPeerUpdate)update;
/// This is called when there are updates on an existing track
/// or a new track got added/existing track is removed
/// This callback can be used to render the video on screen whenever a track gets added
/// \param track the track which was added, removed or updated
///
/// \param update the triggered update type
///
/// \param peer the peer for which track was added, removed or updated
///
- (void)onTrack:(HMSTrack * _Nonnull)track update:(enum HMSTrackUpdate)update peer:(HMSPeer * _Nonnull)peer;
/// This will be called when there is an error in the system
/// and SDK has already retried to fix the error
/// \param error the error that occured
///
- (void)onError:(HMSError * _Nonnull)error;
/// This is called when there is a new broadcast message from any other peer in the room
/// This can be used to implement chat is the room
/// \param message the received broadcast message
///
- (void)onMessage:(HMSMessage * _Nonnull)message;
- (void)onUpdatedSpeakers:(NSArray<HMSSpeaker *> * _Nonnull)speakers;
- (void)onReconnecting;
- (void)onReconnected;
@end


SWIFT_CLASS("_TtC6HMSSDK12HMSUtilities")
@interface HMSUtilities : NSObject
+ (NSArray<HMSDevice *> * _Nonnull)getDevices SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<HMSVideoTrack *> * _Nonnull)getAllVideoTracksFor:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<HMSAudioTrack *> * _Nonnull)getAllAudioTracksFor:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
+ (HMSPeer * _Nullable)getPeerFor:(NSString * _Nonnull)id in:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
#else
//Start of iphoneos
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
#ifndef HMSSDK_SWIFT_H
#define HMSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#import <HMSSDK/HMSSDK.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="HMSSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
@class NSNumber;

/// To join a room created, clients need to create a HMSConfig instance and use that instance to call <code>join</code> method of HMSSDK
SWIFT_CLASS("_TtC6HMSSDK9HMSConfig")
@interface HMSConfig : NSObject
/// the name that the user wants to be displayed while in the room
@property (nonatomic, readonly, copy) NSString * _Nonnull userName;
@property (nonatomic, readonly, copy) NSString * _Nonnull userID;
@property (nonatomic, readonly, copy) NSString * _Nonnull roomID;
/// the auth token to be used
@property (nonatomic, readonly, copy) NSString * _Nonnull authToken;
@property (nonatomic, readonly) BOOL shouldSkipPIIEvents;
/// any json string or metadata that can be passed while joining
@property (nonatomic, readonly, copy) NSString * _Nullable metaData;
/// to override the default endpoint (advanced)
@property (nonatomic, readonly, copy) NSString * _Nullable endpoint;
- (nonnull instancetype)initWithUserName:(NSString * _Nonnull)userName userID:(NSString * _Nonnull)userID roomID:(NSString * _Nonnull)roomID authToken:(NSString * _Nonnull)authToken shouldSkipPIIEvents:(BOOL)shouldSkipPIIEvents metaData:(NSString * _Nullable)metaData endpoint:(NSString * _Nullable)endpoint OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK9HMSDevice")
@interface HMSDevice : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum HMSErrorCode : NSInteger;

SWIFT_CLASS("_TtC6HMSSDK8HMSError")
@interface HMSError : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum HMSErrorCode code;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, copy) NSString * _Nullable info;
@property (nonatomic, readonly, copy) NSString * _Nullable action;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable params;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id code:(enum HMSErrorCode)code message:(NSString * _Nonnull)message info:(NSString * _Nullable)info action:(NSString * _Nullable)action params:(NSDictionary<NSString *, id> * _Nullable)params OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedDescription;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull analyticsRepresentation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HMSErrorCode, open) {
  HMSErrorCodeWebsocketGenericError = 1000,
  HMSErrorCodeWebsocketConnectionLost = 1003,
  HMSErrorCodeInitServerError = 2000,
  HMSErrorCodeInitHTTPConnectionLost = 2001,
  HMSErrorCodeInitHTTPErrorBadRequest = 2400,
  HMSErrorCodeInitHTTPErrorInvalidEndpointURL = 2002,
  HMSErrorCodeInitHTTPErrorEndpointUnreachable = 2003,
  HMSErrorCodeTracksErrorGeneric = 3000,
  HMSErrorCodeTracksErrorCantAccessCaptureDevice = 3001,
  HMSErrorCodeTracksErrorDeviceNotAvailable = 3002,
  HMSErrorCodeTracksErrorDeviceInUse = 3003,
  HMSErrorCodeTracksErrorPeerConnectionFactoryDisposed = 3004,
  HMSErrorCodeTracksErrorNothingToReturn = 3005,
  HMSErrorCodeTracksErrorInvalidVideoSettings = 3006,
  HMSErrorCodeTracksErrorCodecChangeNotPermitted = 3007,
  HMSErrorCodeWebrtcErrorCreateOfferFailed = 4001,
  HMSErrorCodeWebrtcErrorCreateAnswerFailed = 4002,
  HMSErrorCodeWebrtcErrorSetLocalDescriptionFailed = 4003,
  HMSErrorCodeWebrtcErrorSetRemoteDescriptionFailed = 4004,
  HMSErrorCodeWebrtcErrorICEFailure = 4005,
  HMSErrorCodeJoinErrorServer = 5000,
  HMSErrorCodeJoinErrorAlreadyJoined = 5001,
  HMSErrorCodeGenericErrorNotConnected = 6000,
  HMSErrorCodeGenericErrorSignalling = 6001,
  HMSErrorCodeGenericErrorUnknown = 6002,
  HMSErrorCodeGenericErrorNotReady = 6003,
  HMSErrorCodeGenericErrorJsonParsingFailed = 6004,
  HMSErrorCodeGenericErrorTrackMetadataMissing = 6005,
  HMSErrorCodeGenericErrorRTCTrackMissing = 6006,
  HMSErrorCodeGenericErrorPeerMetadataMissing = 6007,
};

@class HMSAudioTrack;
@class HMSVideoTrack;
@class HMSTrack;

/// A peer represents all participants connected to a room. Peers can be “local” or “remote”
SWIFT_CLASS("_TtC6HMSSDK7HMSPeer")
@interface HMSPeer : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull peerID;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) BOOL isLocal;
@property (nonatomic, copy) NSString * _Nullable role;
@property (nonatomic, readonly, copy) NSString * _Nullable customerUserID;
@property (nonatomic, copy) NSString * _Nullable customerDescription;
@property (nonatomic, strong) HMSAudioTrack * _Nullable audioTrack;
@property (nonatomic, strong) HMSVideoTrack * _Nullable videoTrack;
@property (nonatomic, copy) NSArray<HMSTrack *> * _Nullable auxiliaryTracks;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class HMSLocalAudioTrack;
@class HMSLocalVideoTrack;

SWIFT_CLASS("_TtC6HMSSDK12HMSLocalPeer")
@interface HMSLocalPeer : HMSPeer
- (HMSLocalAudioTrack * _Nullable)localAudioTrack SWIFT_WARN_UNUSED_RESULT;
- (HMSLocalVideoTrack * _Nullable)localVideoTrack SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, HMSLogLevel, open) {
  HMSLogLevelOff = 0,
  HMSLogLevelError = 1,
  HMSLogLevelWarning = 2,
  HMSLogLevelVerbose = 3,
};


SWIFT_PROTOCOL("_TtP6HMSSDK13HMSLumberjack_")
@protocol HMSLumberjack
- (void)logMessage:(NSString * _Nonnull)message level:(enum HMSLogLevel)level;
@end


/// A local peer can send any message/data to all remote peers in the room
SWIFT_CLASS("_TtC6HMSSDK10HMSMessage")
@interface HMSMessage : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull sender;
/// peerID, optional, default is nil in which case broadcast will be sent to all
@property (nonatomic, readonly, copy) NSString * _Nullable receiver;
@property (nonatomic, readonly, copy) NSString * _Nonnull time;
/// default is Chat Type
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// string
@property (nonatomic, readonly, copy) NSString * _Nullable message;
- (nonnull instancetype)initWithSender:(NSString * _Nonnull)sender receiver:(NSString * _Nullable)receiver time:(NSString * _Nonnull)time type:(NSString * _Nonnull)type message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK17HMSNetworkQuality")
@interface HMSNetworkQuality : NSObject
@property (nonatomic, readonly, strong) HMSPeer * _Nonnull peer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



typedef SWIFT_ENUM(NSInteger, HMSPeerUpdate, open) {
  HMSPeerUpdatePeerJoined = 0,
  HMSPeerUpdatePeerLeft = 1,
  HMSPeerUpdatePeerKnocked = 2,
  HMSPeerUpdateAudioToggled = 3,
  HMSPeerUpdateVideoToggled = 4,
  HMSPeerUpdateRoleUpdated = 5,
  HMSPeerUpdateDefaultUpdate = 6,
};

@class HMSRemoteAudioTrack;
@class HMSRemoteVideoTrack;

SWIFT_CLASS("_TtC6HMSSDK13HMSRemotePeer")
@interface HMSRemotePeer : HMSPeer
- (HMSRemoteAudioTrack * _Nullable)remoteAudioTrack SWIFT_WARN_UNUSED_RESULT;
- (HMSRemoteVideoTrack * _Nullable)remoteVideoTrack SWIFT_WARN_UNUSED_RESULT;
@end


/// A room represents a real-time audio, video session, the basic building block of the 100ms SDK
SWIFT_CLASS("_TtC6HMSSDK7HMSRoom")
@interface HMSRoom : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nullable metaData;
@property (nonatomic, copy) NSArray<HMSPeer *> * _Nonnull peers;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HMSRoomUpdate, open) {
  HMSRoomUpdateRoomTypeChanged = 0,
  HMSRoomUpdateMetaDataUpdated = 1,
};

@protocol HMSUpdateListener;
@class HMSTrackSettings;

/// The public interface of 100ms SDK. Create an instance of HMSSDK to start using the SDK.
/// <em>Key Concepts</em>
/// <em>Room</em> - A room represents a real-time audio, video session, the basic building block of the 100mslive Video SDK
/// <em>Track</em> - A track represents either the audio or video that makes up a stream
/// <em>Peer</em> - A peer represents all participants connected to a room. Peers can be “local” or “remote”
/// <em>Broadcast</em> - A local peer can send any message/data to all remote peers in the room
/// HMSSDK has other methods which the client app can use to get more info about the Room, Peer and Tracks
SWIFT_CLASS("_TtC6HMSSDK6HMSSDK")
@interface HMSSDK : NSObject
/// To join a room created, clients need to create a HMSConfig instance and use that instance to call <code>join</code> method of HMSSDK
/// Use the HMSConfig and HMSUpdateListener instances to call <code>join</code> method on the instance of HMSSDK.
/// Once Join succeeds, all the callbacks keep coming on every change in the room and the app can react accordingly
/// \param config the config object instance which contains joining information
///
/// \param delegate the update listener object which will receive all callbacks
///
- (void)joinWithConfig:(HMSConfig * _Nonnull)config delegate:(id <HMSUpdateListener> _Nonnull)delegate;
/// Call the <code>leave</code> method on the HMSSDK instance to leave a room
- (void)leave;
/// Returns the local peer, which contains the local tracks
@property (nonatomic, readonly, strong) HMSLocalPeer * _Nullable localPeer;
/// Returns all remote peers in the room
@property (nonatomic, readonly, copy) NSArray<HMSRemotePeer *> * _Nullable remotePeers;
/// Returns the room which was joined
@property (nonatomic, readonly, strong) HMSRoom * _Nullable room;
- (void)sendWithMessage:(HMSMessage * _Nonnull)message;
- (void)addWithDelegate:(id <HMSUpdateListener> _Nonnull)delegate;
- (void)removeWithDelegate:(id <HMSUpdateListener> _Nonnull)delegate;
/// this will instantiate an HMSSDK object
/// \param block pass a block with different settings as required
///
///
/// returns:
/// an instance of HMSSDK object
+ (HMSSDK * _Nonnull)buildWithBlock:(void (^ _Nullable)(HMSSDK * _Nonnull))block SWIFT_WARN_UNUSED_RESULT;
/// to set a track settings different from default
@property (nonatomic, strong) HMSTrackSettings * _Nonnull trackSettings;
/// set the analytical level
@property (nonatomic) HMSAnalyticsEventLevel analyticsLevel;
/// set the logging level
@property (nonatomic) enum HMSLogLevel logLevel;
@property (nonatomic, strong) id <HMSLumberjack> _Nullable logger;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK10HMSSpeaker")
@interface HMSSpeaker : NSObject
@end


typedef SWIFT_ENUM(NSInteger, HMSTrackUpdate, open) {
  HMSTrackUpdateTrackAdded = 0,
  HMSTrackUpdateTrackRemoved = 1,
  HMSTrackUpdateTrackMuted = 2,
  HMSTrackUpdateTrackUnmuted = 3,
  HMSTrackUpdateTrackDescriptionChanged = 4,
};


/// 100ms SDK provides callbacks to the client app about any change or update happening in the room after a user has joined by implementing HMSUpdateListener.
/// These updates can be used to render the video on screen or to display other info regarding the room.
SWIFT_PROTOCOL("_TtP6HMSSDK17HMSUpdateListener_")
@protocol HMSUpdateListener
/// This will be called on a successful JOIN of the room by the user
/// This is the point where applications can stop showing its loading state
/// \param room the room which was joined
///
- (void)onJoin:(HMSRoom * _Nonnull)room;
/// This is called when there is a change in any property of the Room
/// \param room the room which was joined
///
/// \param update the triggered update type. Should be used to perform different UI Actions
///
- (void)onRoom:(HMSRoom * _Nonnull)room update:(enum HMSRoomUpdate)update;
/// This will be called whenever there is an update on an existing peer
/// or a new peer got added/existing peer is removed.
/// This callback can be used to keep a track of all the peers in the room
/// \param peer the peer who joined/left or was updated
///
/// \param update the triggered update type. Should be used to perform different UI Actions
///
- (void)onPeer:(HMSPeer * _Nonnull)peer update:(enum HMSPeerUpdate)update;
/// This is called when there are updates on an existing track
/// or a new track got added/existing track is removed
/// This callback can be used to render the video on screen whenever a track gets added
/// \param track the track which was added, removed or updated
///
/// \param update the triggered update type
///
/// \param peer the peer for which track was added, removed or updated
///
- (void)onTrack:(HMSTrack * _Nonnull)track update:(enum HMSTrackUpdate)update peer:(HMSPeer * _Nonnull)peer;
/// This will be called when there is an error in the system
/// and SDK has already retried to fix the error
/// \param error the error that occured
///
- (void)onError:(HMSError * _Nonnull)error;
/// This is called when there is a new broadcast message from any other peer in the room
/// This can be used to implement chat is the room
/// \param message the received broadcast message
///
- (void)onMessage:(HMSMessage * _Nonnull)message;
- (void)onUpdatedSpeakers:(NSArray<HMSSpeaker *> * _Nonnull)speakers;
- (void)onReconnecting;
- (void)onReconnected;
@end


SWIFT_CLASS("_TtC6HMSSDK12HMSUtilities")
@interface HMSUtilities : NSObject
+ (NSArray<HMSDevice *> * _Nonnull)getDevices SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<HMSVideoTrack *> * _Nonnull)getAllVideoTracksFor:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<HMSAudioTrack *> * _Nonnull)getAllAudioTracksFor:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
+ (HMSPeer * _Nullable)getPeerFor:(NSString * _Nonnull)id in:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
#ifndef HMSSDK_SWIFT_H
#define HMSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#import <HMSSDK/HMSSDK.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="HMSSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
@class NSNumber;

/// To join a room created, clients need to create a HMSConfig instance and use that instance to call <code>join</code> method of HMSSDK
SWIFT_CLASS("_TtC6HMSSDK9HMSConfig")
@interface HMSConfig : NSObject
/// the name that the user wants to be displayed while in the room
@property (nonatomic, readonly, copy) NSString * _Nonnull userName;
@property (nonatomic, readonly, copy) NSString * _Nonnull userID;
@property (nonatomic, readonly, copy) NSString * _Nonnull roomID;
/// the auth token to be used
@property (nonatomic, readonly, copy) NSString * _Nonnull authToken;
@property (nonatomic, readonly) BOOL shouldSkipPIIEvents;
/// any json string or metadata that can be passed while joining
@property (nonatomic, readonly, copy) NSString * _Nullable metaData;
/// to override the default endpoint (advanced)
@property (nonatomic, readonly, copy) NSString * _Nullable endpoint;
- (nonnull instancetype)initWithUserName:(NSString * _Nonnull)userName userID:(NSString * _Nonnull)userID roomID:(NSString * _Nonnull)roomID authToken:(NSString * _Nonnull)authToken shouldSkipPIIEvents:(BOOL)shouldSkipPIIEvents metaData:(NSString * _Nullable)metaData endpoint:(NSString * _Nullable)endpoint OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK9HMSDevice")
@interface HMSDevice : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum HMSErrorCode : NSInteger;

SWIFT_CLASS("_TtC6HMSSDK8HMSError")
@interface HMSError : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum HMSErrorCode code;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, copy) NSString * _Nullable info;
@property (nonatomic, readonly, copy) NSString * _Nullable action;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable params;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id code:(enum HMSErrorCode)code message:(NSString * _Nonnull)message info:(NSString * _Nullable)info action:(NSString * _Nullable)action params:(NSDictionary<NSString *, id> * _Nullable)params OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedDescription;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull analyticsRepresentation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HMSErrorCode, open) {
  HMSErrorCodeWebsocketGenericError = 1000,
  HMSErrorCodeWebsocketConnectionLost = 1003,
  HMSErrorCodeInitServerError = 2000,
  HMSErrorCodeInitHTTPConnectionLost = 2001,
  HMSErrorCodeInitHTTPErrorBadRequest = 2400,
  HMSErrorCodeInitHTTPErrorInvalidEndpointURL = 2002,
  HMSErrorCodeInitHTTPErrorEndpointUnreachable = 2003,
  HMSErrorCodeTracksErrorGeneric = 3000,
  HMSErrorCodeTracksErrorCantAccessCaptureDevice = 3001,
  HMSErrorCodeTracksErrorDeviceNotAvailable = 3002,
  HMSErrorCodeTracksErrorDeviceInUse = 3003,
  HMSErrorCodeTracksErrorPeerConnectionFactoryDisposed = 3004,
  HMSErrorCodeTracksErrorNothingToReturn = 3005,
  HMSErrorCodeTracksErrorInvalidVideoSettings = 3006,
  HMSErrorCodeTracksErrorCodecChangeNotPermitted = 3007,
  HMSErrorCodeWebrtcErrorCreateOfferFailed = 4001,
  HMSErrorCodeWebrtcErrorCreateAnswerFailed = 4002,
  HMSErrorCodeWebrtcErrorSetLocalDescriptionFailed = 4003,
  HMSErrorCodeWebrtcErrorSetRemoteDescriptionFailed = 4004,
  HMSErrorCodeWebrtcErrorICEFailure = 4005,
  HMSErrorCodeJoinErrorServer = 5000,
  HMSErrorCodeJoinErrorAlreadyJoined = 5001,
  HMSErrorCodeGenericErrorNotConnected = 6000,
  HMSErrorCodeGenericErrorSignalling = 6001,
  HMSErrorCodeGenericErrorUnknown = 6002,
  HMSErrorCodeGenericErrorNotReady = 6003,
  HMSErrorCodeGenericErrorJsonParsingFailed = 6004,
  HMSErrorCodeGenericErrorTrackMetadataMissing = 6005,
  HMSErrorCodeGenericErrorRTCTrackMissing = 6006,
  HMSErrorCodeGenericErrorPeerMetadataMissing = 6007,
};

@class HMSAudioTrack;
@class HMSVideoTrack;
@class HMSTrack;

/// A peer represents all participants connected to a room. Peers can be “local” or “remote”
SWIFT_CLASS("_TtC6HMSSDK7HMSPeer")
@interface HMSPeer : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull peerID;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) BOOL isLocal;
@property (nonatomic, copy) NSString * _Nullable role;
@property (nonatomic, readonly, copy) NSString * _Nullable customerUserID;
@property (nonatomic, copy) NSString * _Nullable customerDescription;
@property (nonatomic, strong) HMSAudioTrack * _Nullable audioTrack;
@property (nonatomic, strong) HMSVideoTrack * _Nullable videoTrack;
@property (nonatomic, copy) NSArray<HMSTrack *> * _Nullable auxiliaryTracks;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class HMSLocalAudioTrack;
@class HMSLocalVideoTrack;

SWIFT_CLASS("_TtC6HMSSDK12HMSLocalPeer")
@interface HMSLocalPeer : HMSPeer
- (HMSLocalAudioTrack * _Nullable)localAudioTrack SWIFT_WARN_UNUSED_RESULT;
- (HMSLocalVideoTrack * _Nullable)localVideoTrack SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, HMSLogLevel, open) {
  HMSLogLevelOff = 0,
  HMSLogLevelError = 1,
  HMSLogLevelWarning = 2,
  HMSLogLevelVerbose = 3,
};


SWIFT_PROTOCOL("_TtP6HMSSDK13HMSLumberjack_")
@protocol HMSLumberjack
- (void)logMessage:(NSString * _Nonnull)message level:(enum HMSLogLevel)level;
@end


/// A local peer can send any message/data to all remote peers in the room
SWIFT_CLASS("_TtC6HMSSDK10HMSMessage")
@interface HMSMessage : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull sender;
/// peerID, optional, default is nil in which case broadcast will be sent to all
@property (nonatomic, readonly, copy) NSString * _Nullable receiver;
@property (nonatomic, readonly, copy) NSString * _Nonnull time;
/// default is Chat Type
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// string
@property (nonatomic, readonly, copy) NSString * _Nullable message;
- (nonnull instancetype)initWithSender:(NSString * _Nonnull)sender receiver:(NSString * _Nullable)receiver time:(NSString * _Nonnull)time type:(NSString * _Nonnull)type message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK17HMSNetworkQuality")
@interface HMSNetworkQuality : NSObject
@property (nonatomic, readonly, strong) HMSPeer * _Nonnull peer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



typedef SWIFT_ENUM(NSInteger, HMSPeerUpdate, open) {
  HMSPeerUpdatePeerJoined = 0,
  HMSPeerUpdatePeerLeft = 1,
  HMSPeerUpdatePeerKnocked = 2,
  HMSPeerUpdateAudioToggled = 3,
  HMSPeerUpdateVideoToggled = 4,
  HMSPeerUpdateRoleUpdated = 5,
  HMSPeerUpdateDefaultUpdate = 6,
};

@class HMSRemoteAudioTrack;
@class HMSRemoteVideoTrack;

SWIFT_CLASS("_TtC6HMSSDK13HMSRemotePeer")
@interface HMSRemotePeer : HMSPeer
- (HMSRemoteAudioTrack * _Nullable)remoteAudioTrack SWIFT_WARN_UNUSED_RESULT;
- (HMSRemoteVideoTrack * _Nullable)remoteVideoTrack SWIFT_WARN_UNUSED_RESULT;
@end


/// A room represents a real-time audio, video session, the basic building block of the 100ms SDK
SWIFT_CLASS("_TtC6HMSSDK7HMSRoom")
@interface HMSRoom : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nullable metaData;
@property (nonatomic, copy) NSArray<HMSPeer *> * _Nonnull peers;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HMSRoomUpdate, open) {
  HMSRoomUpdateRoomTypeChanged = 0,
  HMSRoomUpdateMetaDataUpdated = 1,
};

@protocol HMSUpdateListener;
@class HMSTrackSettings;

/// The public interface of 100ms SDK. Create an instance of HMSSDK to start using the SDK.
/// <em>Key Concepts</em>
/// <em>Room</em> - A room represents a real-time audio, video session, the basic building block of the 100mslive Video SDK
/// <em>Track</em> - A track represents either the audio or video that makes up a stream
/// <em>Peer</em> - A peer represents all participants connected to a room. Peers can be “local” or “remote”
/// <em>Broadcast</em> - A local peer can send any message/data to all remote peers in the room
/// HMSSDK has other methods which the client app can use to get more info about the Room, Peer and Tracks
SWIFT_CLASS("_TtC6HMSSDK6HMSSDK")
@interface HMSSDK : NSObject
/// To join a room created, clients need to create a HMSConfig instance and use that instance to call <code>join</code> method of HMSSDK
/// Use the HMSConfig and HMSUpdateListener instances to call <code>join</code> method on the instance of HMSSDK.
/// Once Join succeeds, all the callbacks keep coming on every change in the room and the app can react accordingly
/// \param config the config object instance which contains joining information
///
/// \param delegate the update listener object which will receive all callbacks
///
- (void)joinWithConfig:(HMSConfig * _Nonnull)config delegate:(id <HMSUpdateListener> _Nonnull)delegate;
/// Call the <code>leave</code> method on the HMSSDK instance to leave a room
- (void)leave;
/// Returns the local peer, which contains the local tracks
@property (nonatomic, readonly, strong) HMSLocalPeer * _Nullable localPeer;
/// Returns all remote peers in the room
@property (nonatomic, readonly, copy) NSArray<HMSRemotePeer *> * _Nullable remotePeers;
/// Returns the room which was joined
@property (nonatomic, readonly, strong) HMSRoom * _Nullable room;
- (void)sendWithMessage:(HMSMessage * _Nonnull)message;
- (void)addWithDelegate:(id <HMSUpdateListener> _Nonnull)delegate;
- (void)removeWithDelegate:(id <HMSUpdateListener> _Nonnull)delegate;
/// this will instantiate an HMSSDK object
/// \param block pass a block with different settings as required
///
///
/// returns:
/// an instance of HMSSDK object
+ (HMSSDK * _Nonnull)buildWithBlock:(void (^ _Nullable)(HMSSDK * _Nonnull))block SWIFT_WARN_UNUSED_RESULT;
/// to set a track settings different from default
@property (nonatomic, strong) HMSTrackSettings * _Nonnull trackSettings;
/// set the analytical level
@property (nonatomic) HMSAnalyticsEventLevel analyticsLevel;
/// set the logging level
@property (nonatomic) enum HMSLogLevel logLevel;
@property (nonatomic, strong) id <HMSLumberjack> _Nullable logger;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK10HMSSpeaker")
@interface HMSSpeaker : NSObject
@end


typedef SWIFT_ENUM(NSInteger, HMSTrackUpdate, open) {
  HMSTrackUpdateTrackAdded = 0,
  HMSTrackUpdateTrackRemoved = 1,
  HMSTrackUpdateTrackMuted = 2,
  HMSTrackUpdateTrackUnmuted = 3,
  HMSTrackUpdateTrackDescriptionChanged = 4,
};


/// 100ms SDK provides callbacks to the client app about any change or update happening in the room after a user has joined by implementing HMSUpdateListener.
/// These updates can be used to render the video on screen or to display other info regarding the room.
SWIFT_PROTOCOL("_TtP6HMSSDK17HMSUpdateListener_")
@protocol HMSUpdateListener
/// This will be called on a successful JOIN of the room by the user
/// This is the point where applications can stop showing its loading state
/// \param room the room which was joined
///
- (void)onJoin:(HMSRoom * _Nonnull)room;
/// This is called when there is a change in any property of the Room
/// \param room the room which was joined
///
/// \param update the triggered update type. Should be used to perform different UI Actions
///
- (void)onRoom:(HMSRoom * _Nonnull)room update:(enum HMSRoomUpdate)update;
/// This will be called whenever there is an update on an existing peer
/// or a new peer got added/existing peer is removed.
/// This callback can be used to keep a track of all the peers in the room
/// \param peer the peer who joined/left or was updated
///
/// \param update the triggered update type. Should be used to perform different UI Actions
///
- (void)onPeer:(HMSPeer * _Nonnull)peer update:(enum HMSPeerUpdate)update;
/// This is called when there are updates on an existing track
/// or a new track got added/existing track is removed
/// This callback can be used to render the video on screen whenever a track gets added
/// \param track the track which was added, removed or updated
///
/// \param update the triggered update type
///
/// \param peer the peer for which track was added, removed or updated
///
- (void)onTrack:(HMSTrack * _Nonnull)track update:(enum HMSTrackUpdate)update peer:(HMSPeer * _Nonnull)peer;
/// This will be called when there is an error in the system
/// and SDK has already retried to fix the error
/// \param error the error that occured
///
- (void)onError:(HMSError * _Nonnull)error;
/// This is called when there is a new broadcast message from any other peer in the room
/// This can be used to implement chat is the room
/// \param message the received broadcast message
///
- (void)onMessage:(HMSMessage * _Nonnull)message;
- (void)onUpdatedSpeakers:(NSArray<HMSSpeaker *> * _Nonnull)speakers;
- (void)onReconnecting;
- (void)onReconnected;
@end


SWIFT_CLASS("_TtC6HMSSDK12HMSUtilities")
@interface HMSUtilities : NSObject
+ (NSArray<HMSDevice *> * _Nonnull)getDevices SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<HMSVideoTrack *> * _Nonnull)getAllVideoTracksFor:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<HMSAudioTrack *> * _Nonnull)getAllAudioTracksFor:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
+ (HMSPeer * _Nullable)getPeerFor:(NSString * _Nonnull)id in:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
#endif
